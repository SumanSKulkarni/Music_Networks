function G = generate_MidiNetnew(notes)
% Input: N x 8 matrix notes (as generated by midiInfo function), where each
% row corresponds to a unique note in a song, the first column lists the 
% note's track number, the third column lists the numerical value of the
% note, and the fifth column lists the note's start time.
%
% Output: maxNote x maxNote binary directed matrix G representing the note
% transitions. To calculate transitions, we consider each track
% individually. If multiple notes occur on the same track at the same time
% index t (as in a chord), we count transitions from the note at time index t-1 to all
% notes at time index t and we count transitions from all notes at time index t to the
% note at time index t+1.

numNotes = max(notes(:,3));
tracks = unique(notes(:,1));

G = zeros(numNotes);

% Loop over tracks:

for track = tracks'
    
    % Notes corresponding to track:
    
    notes_track = notes(notes(:,1) == track, :);
    
    channels = unique(notes_track(:,2));
    
    % Loop over channels:
    
    for channel = channels'
        
        % Notes corresponding to channel:
        
        notes_channel = notes_track(notes_track(:,2) == channel, :);
    
        % Different times that notes are played on this track:
    
        times = unique(notes_channel(:,5));
    
        inds_I = (notes_channel(:,5) == times(1));
        notes_I = notes_channel(inds_I, 3);
        
        % Loop over start times:
    
        for t = times(2:end)'
        
            inds_J = (notes_channel(:,5) == t);
            notes_J = notes_channel(inds_J, 3);
        
            G(notes_I, notes_J) = G(notes_I, notes_J) + 1;
        
            notes_I = notes_J;
    
        end
        
    end
    
end

% Binary (unweighted) network:
G = double(G > 0); % Comment out to get weighted

% Limit to single connected component:
bins = conncomp(digraph(G));
nodes = find(bins == mode(bins));

% Binary (unweighted) network:
G = double(G(nodes,nodes) > 0); % Comment out to get weighted

% Uncomment this if you want an undirected network:
% G = double(G + G' > 0);

% Uncomment this if you do not want self-loops:
 G = G - diag(diag(G));